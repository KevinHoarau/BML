URLS=[
"BML/index.html",
"BML/scripts/index.html",
"BML/scripts/updates_dump.html",
"BML/scripts/routes_dump.html",
"BML/scripts/run_jobs.html",
"BML/data/index.html",
"BML/data/dataset.html",
"BML/data/routes.html",
"BML/data/updates.html",
"BML/utils/index.html",
"BML/utils/utils.html",
"BML/transform/index.html",
"BML/transform/graph.html",
"BML/transform/base_transform.html",
"BML/transform/routes_features.html",
"BML/transform/dataset_transformation.html",
"BML/transform/features.html",
"BML/transform/graph_features.html",
"BML/transform/nodes_features.html",
"BML/transform/hijackLabel.html"
];
INDEX=[
{
"ref":"BML",
"url":0,
"doc":"BML is a BGP dataset generation tool that extracts the majority of known features in the literature, the internet topology and that allows the user to build specific features from BGP data.  Getting started In this getting started guide, we will implement the use case presented in the BML's paper: \"BML: An Efficient and Versatile Tool for BGP Dataset Collection\".  Installation   $ git clone https: github.com/KevinHoarau/BML.git $ cd BML $ python setup.py install    Dataset Dataset definition and collection:   dataset.load() takes as input a python  dict that describes the collection parameters.  The field  PeriodsOfInterests takes a  list of  dict where each  dict describes a sample in the dataset.   from BML.data import Dataset from BML import utils   Data collection folder = \"dataset/\" dataset = Dataset(folder) dataset.load({ \"PrimingPeriod\": 10 60,  10 hours of priming data \"IpVersion\": [4],  only IPv4 routes \"Collectors\": [\"rrc06\"],  rrc06: at Otemachi, Japan \"PeriodsOfInterests\": [{ \"name\": \"GoogleLeak\", \"label\": \"anomaly\", \"start_time\": utils.getTimestamp(2017, 8, 25, 3, 0, 0),  August 25, 2017, 3:00 UTC \"end_time\": utils.getTimestamp(2017, 8, 25, 4, 0, 0)  August 25, 2017, 4:00 UTC }] })  run the data collection utils.runJobs(dataset.getJobs(), folder+\"collect_jobs\")   When BML is collecting data for a sample, the progression is reported in a log file in the sample's folder. Then, we can monitor the progression using a bash command as:   $ watch cat dataset/anomaly/GoogleLeak/log_collect_sample.log   If the dataset contains multiples samples, which is usually the case, the processing queue can be monitored using:   $ watch -n 1 cat dataset/collect_jobs/queue.log   Statistical features extraction When the data has been collected, we can run our first data transformation. Here we will extract [BGP statistical features]( statistical-features).   from BML.transform import DatasetTransformation  features extraction every minute datTran = DatasetTransformation(folder, \"BML.transform\", \"Features\") datTran.setParams({ \"global\":{ \"Period\": 1, } })  run the data transformation utils.runJobs(datTran.getJobs(), folder+\"transform_jobs\")   Again, the sample's transformation progression can be monitored using:   $ watch cat dataset/anomaly/GoogleLeak/transform/Features/log_transform_sample.log   And the overall transformation progression can be monitored using:   $ watch -n 1 cat dataset/transform_jobs/queue.log   By default, the output of the transformation is saved in a json file in the sample's folder. The default name for this file is:  {tranformation_name}_{period}.json . The data can easily be loaded and vizualized in python:   import pandas as pd data = pd.read_json(folder+\"anomaly/GoogleLeak/transform/Features/Features_1.json\") data.plot(figsize=(10,10   Output: ![features](http: readthedocs.org/bml/images/getting_started_features.png)  Graph features extraction Similarly, we can extract [BGP graph features]( graph-features).    graph features extraction every minute datTran = DatasetTransformation(folder, \"BML.transform\", \"GraphFeatures\") datTran.setParams({ \"global\":{ \"Period\": 1, } })  run the data transformation utils.runJobs(datTran.getJobs(), folder+\"transform_jobs\")    Custom data transformation BML offers [base tranformation objects]( custom-data-transformation_1) than we can inherit to build a custom data tranformation. For this example, let's say that we want to compute the number of announcements received during an interval where the Google AS (AS 15169) is in the AS-PATH. We implement the data transformation in a file named  GoogleRoutes.py :   from BML.transform import BaseTransform class GoogleRoutes(BaseTransform): computeRoutes = False def transforms(self, index, routes, updates): n = 0 for update in updates: if update[\"type\"] 'A': if \"15169\" in update[\"fields\"][\"as-path\"]: n += 1 return(n)   Then, we can use it as any data tranformation:    custom data transformation every minute datTran = DatasetTransformation(folder, \"GoogleRoutes\", \"GoogleRoutes\") datTran.setParams({ \"global\":{ \"Period\": 1, } })  run the data transformation utils.runJobs(datTran.getJobs(), folder+\"transform_jobs\")   We can also load and vizualise the output as previously:   import pandas as pd data = pd.read_json(folder+\"anomaly/GoogleLeak/transform/GoogleRoutes/GoogleRoutes_1.json\") data.plot(figsize=(5,5   Output: ![features](http: readthedocs.org/bml/images/getting_started_googleroutes.png)  Data tranformation  Statistical features  Graph features  Nodes features  BGP graph  Hijack label  Routes features  Custom data transformation  BaseTransform  BaseTransformParallelized  Command Line Interface (CLI)  Run jobs  Updates dump  Routes dump"
},
{
"ref":"BML.scripts",
"url":1,
"doc":""
},
{
"ref":"BML.scripts.updates_dump",
"url":2,
"doc":""
},
{
"ref":"BML.scripts.updates_dump.parseArgs",
"url":2,
"doc":"",
"func":1
},
{
"ref":"BML.scripts.updates_dump.main",
"url":2,
"doc":"",
"func":1
},
{
"ref":"BML.scripts.routes_dump",
"url":3,
"doc":""
},
{
"ref":"BML.scripts.routes_dump.parseArgs",
"url":3,
"doc":"",
"func":1
},
{
"ref":"BML.scripts.routes_dump.main",
"url":3,
"doc":"",
"func":1
},
{
"ref":"BML.scripts.run_jobs",
"url":4,
"doc":"Script that execute jobs in parallel from a jobs file. Args: -f (str): path to the jobs file -p (int): number of processes to execute in parallel"
},
{
"ref":"BML.scripts.run_jobs.main",
"url":4,
"doc":"",
"func":1
},
{
"ref":"BML.data",
"url":5,
"doc":""
},
{
"ref":"BML.data.dataset",
"url":6,
"doc":""
},
{
"ref":"BML.data.dataset.processSample",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset",
"url":6,
"doc":""
},
{
"ref":"BML.data.dataset.Dataset.setUseRibs",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setIpVersion",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setProjects",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setCollectors",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setPeriodsOfInterests",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setPrimingPeriod",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setFolder",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.setSkipIfExist",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.load",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.loadFromFile",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.dataset.Dataset.getJobs",
"url":6,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes",
"url":7,
"doc":""
},
{
"ref":"BML.data.routes.RoutesDump",
"url":7,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.data.routes.RoutesDump.setProjects",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.setIpVersion",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.setCollectors",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.setInterval",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.setUpdates",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.setUpdatesFile",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.startStream",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.getProgress",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.isRunning",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.stop",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.dumpUpdate",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.buildRoutesDump",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.buildRoutesDumpFromUpdates",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.buildRoutesDumpFromUpdatesFile",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.getOutputFilename",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.saveTo",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.routes.RoutesDump.run",
"url":7,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.data.routes.dumpRoutes",
"url":7,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates",
"url":8,
"doc":""
},
{
"ref":"BML.data.updates.serialize_sets",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump",
"url":8,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.data.updates.UpdatesDump.setUseRibs",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.setProjects",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.setIpVersion",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.setCollectors",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.setInterval",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.startStream",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.getProgress",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.isRunning",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.stop",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.buildUpdatesDump",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.getOutputFilename",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.getFilePath",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.emptyFile",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.appendToFile",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.data.updates.UpdatesDump.run",
"url":8,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.data.updates.dumpUpdates",
"url":8,
"doc":"",
"func":1
},
{
"ref":"BML.utils",
"url":9,
"doc":""
},
{
"ref":"BML.utils.utils",
"url":10,
"doc":"Summary"
},
{
"ref":"BML.utils.utils.getIndexList",
"url":10,
"doc":"",
"func":1
},
{
"ref":"BML.utils.utils.timeFormat",
"url":10,
"doc":"Summary Args: time (TYPE): Description Returns: TYPE: Description",
"func":1
},
{
"ref":"BML.utils.utils.mkdirPath",
"url":10,
"doc":"Create all folder in a path Args: path (str): a path Returns: str: the created path",
"func":1
},
{
"ref":"BML.utils.utils.printAndLog",
"url":10,
"doc":"Summary Args: line (TYPE): Description files (TYPE): Description indent (str, optional): Description",
"func":1
},
{
"ref":"BML.utils.utils.printProgress",
"url":10,
"doc":"Summary Args: pObject (TYPE): Description logFiles (TYPE): Description",
"func":1
},
{
"ref":"BML.utils.utils.getTimestamp",
"url":10,
"doc":"Summary Args: y (TYPE): Description m (TYPE): Description d (TYPE): Description h (TYPE): Description s (TYPE): Description Returns: TYPE: Description",
"func":1
},
{
"ref":"BML.utils.utils.gzipFile",
"url":10,
"doc":"Summary Args: filepath (TYPE): Description remove (bool, optional): Description Returns: TYPE: Description",
"func":1
},
{
"ref":"BML.utils.utils.ungzipFile",
"url":10,
"doc":"Summary Args: filegzpath (TYPE): Description remove (bool, optional): Description Returns: TYPE: Description",
"func":1
},
{
"ref":"BML.utils.utils.ungzipFileInMemory",
"url":10,
"doc":"",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue",
"url":10,
"doc":"Summary Attributes: finish (list): Description nbProcess (TYPE): Description processes (list): Description queue (list): Description running (list): Description Summary Args: nbProcess (int, optional): Description"
},
{
"ref":"BML.utils.utils.ProcessingQueue.stop",
"url":10,
"doc":"",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue.runOnce",
"url":10,
"doc":"",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue.waitUntilFree",
"url":10,
"doc":"",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue.run",
"url":10,
"doc":"Summary Args: logFilePath (str, optional): Description",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue.addProcess",
"url":10,
"doc":"Summary Args: target (None, optional): Description args (tuple, optional): Description kwargs (dict, optional): Description",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue.formatLog",
"url":10,
"doc":"Summary Args: listP (TYPE): Description Returns: TYPE: Description",
"func":1
},
{
"ref":"BML.utils.utils.ProcessingQueue.runLog",
"url":10,
"doc":"Summary Args: logFilePath (TYPE): Description",
"func":1
},
{
"ref":"BML.utils.utils.MissingArg",
"url":10,
"doc":"Exeception class for missing args"
},
{
"ref":"BML.utils.utils.printHelp",
"url":10,
"doc":"Print help for usage of a command Args: help (str): help text",
"func":1
},
{
"ref":"BML.utils.utils.getArg",
"url":10,
"doc":"Get an argument from the command line, (e.g. \"-a\" for the value after \"-a\" in the command line). If the the arg is missing, return None if the is arg is optional otherwise a MissingArg exception is raised. Args: arg (str): arg to get optional (bool): argument to get Returns: str: arg value",
"func":1
},
{
"ref":"BML.utils.utils.getIntArg",
"url":10,
"doc":"Similar to \"getArg\" but return the integer value of the arg. Args: arg (str): arg to get optional (bool): argument to get Returns: int: arg value",
"func":1
},
{
"ref":"BML.utils.utils.saveJobs",
"url":10,
"doc":"Dump a jobs list to multiple parts. Args: jobs (list): a jobs list folder (str): the output folder parts (int, optional): the number of parts",
"func":1
},
{
"ref":"BML.utils.utils.runJobs",
"url":10,
"doc":"",
"func":1
},
{
"ref":"BML.transform",
"url":11,
"doc":""
},
{
"ref":"BML.transform.graph",
"url":12,
"doc":""
},
{
"ref":"BML.transform.graph.buildWeightedGraph",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.buildGraph",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.getEdges",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.buildGraphParallelized",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.Graph",
"url":12,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.graph.Graph.computeSnapshot",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.Graph.runTransforms",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.Graph.transforms",
"url":12,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph.Graph.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.routes_features",
"url":14,
"doc":""
},
{
"ref":"BML.transform.routes_features.RoutesFeatures",
"url":14,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.routes_features.RoutesFeatures.transforms",
"url":14,
"doc":"",
"func":1
},
{
"ref":"BML.transform.routes_features.RoutesFeatures.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.dataset_transformation",
"url":15,
"doc":""
},
{
"ref":"BML.transform.dataset_transformation.getFolders",
"url":15,
"doc":"",
"func":1
},
{
"ref":"BML.transform.dataset_transformation.processSample",
"url":15,
"doc":"",
"func":1
},
{
"ref":"BML.transform.dataset_transformation.DatasetTransformation",
"url":15,
"doc":""
},
{
"ref":"BML.transform.dataset_transformation.DatasetTransformation.setParams",
"url":15,
"doc":"",
"func":1
},
{
"ref":"BML.transform.dataset_transformation.DatasetTransformation.setFolders",
"url":15,
"doc":"",
"func":1
},
{
"ref":"BML.transform.dataset_transformation.DatasetTransformation.setSkipIfExist",
"url":15,
"doc":"",
"func":1
},
{
"ref":"BML.transform.dataset_transformation.DatasetTransformation.getJobs",
"url":15,
"doc":"",
"func":1
},
{
"ref":"BML.transform.features",
"url":16,
"doc":""
},
{
"ref":"BML.transform.features.selectedASes",
"url":16,
"doc":"",
"func":1
},
{
"ref":"BML.transform.features.Features",
"url":16,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.features.Features.computeRoutes",
"url":16,
"doc":""
},
{
"ref":"BML.transform.features.Features.transforms",
"url":16,
"doc":"",
"func":1
},
{
"ref":"BML.transform.features.Features.postProcess",
"url":16,
"doc":"",
"func":1
},
{
"ref":"BML.transform.features.Features.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.graph_features",
"url":17,
"doc":""
},
{
"ref":"BML.transform.graph_features.avgNodes",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.nb_of_nodes",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.nb_of_edges",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.diameter",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.assortativity",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.largest_eigenvalue",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.algebraic_connectivity",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.symmetry_ratio",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.natural_connectivity",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.weighted_spectrum",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.percolation_limit",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.effective_graph_resistance",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.node_connectivity",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.edge_connectivity",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.nb_spanning_trees",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.GraphFeatures",
"url":17,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.graph_features.GraphFeatures.transforms",
"url":17,
"doc":"",
"func":1
},
{
"ref":"BML.transform.graph_features.GraphFeatures.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.base_transform",
"url":13,
"doc":""
},
{
"ref":"BML.transform.base_transform.BaseTransform",
"url":13,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.base_transform.BaseTransform.computeRoutes",
"url":13,
"doc":""
},
{
"ref":"BML.transform.base_transform.BaseTransform.setParams",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.setFolder",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.setOutputFolder",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.setLogFiles",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.getProgress",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.isRunning",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.stop",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.prepare",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.init",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.computeSnapshot",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.compute",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.parseUpdate",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.getOutputFilename",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.save",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.exists",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.saveData",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.transforms",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.preProcess",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.postProcess",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransform.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransformParallelized",
"url":13,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.base_transform.BaseTransformParallelized.preProcess",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransformParallelized.computeSnapshot",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransformParallelized.compute",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransformParallelized.runTransforms",
"url":13,
"doc":"",
"func":1
},
{
"ref":"BML.transform.base_transform.BaseTransformParallelized.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.nodes_features",
"url":18,
"doc":""
},
{
"ref":"BML.transform.nodes_features.nx2cu",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.nx2nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.dictKeys",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.valuesDict",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.betweenness",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.betweenness_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.betweenness_subset",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.approx_betweenness_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.load",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.closeness",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.closeness_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.approx_closeness_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.harmonic",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.harmonic_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.degree",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.degree_centrality",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.degree_centrality_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.eigenvector",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.eigenvector_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.pagerank",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.pagerank_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.number_of_cliques",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.number_of_cliques_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.node_clique_number",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.node_clique_number_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.clustering",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.clustering_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.triangles",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.triangles_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.square_clustering",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.average_neighbor_degree",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.eccentricity",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.eccentricity_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.local_efficiency",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.average_shortest_path_length",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.average_shortest_path_length_nk",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.connectivity",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.computeFeatures",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.run",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.computeFeaturesParallelized",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.removedExcludedFeatures",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.NodesFeatures",
"url":18,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.nodes_features.NodesFeatures.transforms",
"url":18,
"doc":"",
"func":1
},
{
"ref":"BML.transform.nodes_features.NodesFeatures.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
},
{
"ref":"BML.transform.hijackLabel",
"url":19,
"doc":""
},
{
"ref":"BML.transform.hijackLabel.HijackLabel",
"url":19,
"doc":"A class that represents a thread of control. This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass. This constructor should always be called with keyword arguments. Arguments are:  group should be None; reserved for future extension when a ThreadGroup class is implemented.  target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.  name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.  args is the argument tuple for the target invocation. Defaults to ().  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__( before doing anything else to the thread."
},
{
"ref":"BML.transform.hijackLabel.HijackLabel.transforms",
"url":19,
"doc":"",
"func":1
},
{
"ref":"BML.transform.hijackLabel.HijackLabel.run",
"url":13,
"doc":"Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.",
"func":1
}
]